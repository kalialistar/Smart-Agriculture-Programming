import requests
import vonage
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import smtplib
import streamlit as st
import time
import math
import re

# 발신자 이메일과 앱 비밀번호 고정
SENDER_EMAIL = "jbnushading@gmail.com"
SENDER_PASSWORD = "zvrx ilcp jmfv qfrm"

# Nexmo(Vonage) API 설정
client = vonage.Client(key="89282f8a", secret="NJmve0B6Ot19OQYW")
sms = vonage.Sms(client)

# 필름 종류별 감쇠 계수와 두께 범위 설정
FILM_PROPERTIES = {
    "PE (80~200 µm)": {"attenuation": (0.08, 0.12), "thickness": (80, 200)},
    "PO (150~250 µm)": {"attenuation": (0.1, 0.14), "thickness": (150, 250)},
    "PVC (200~300 µm)": {"attenuation": (0.12, 0.18), "thickness": (200, 300)},
    "EVA (100~250 µm)": {"attenuation": (0.1, 0.15), "thickness": (100, 250)},
    "형판유리 (3~6 mm)": {"attenuation": (0.05, 0.08), "thickness": (3000, 6000)},  # µm 단위로 변환
    "판유리 (3~6 mm)": {"attenuation": (0.04, 0.07), "thickness": (3000, 6000)},
    "열선흡수유리 (3~6 mm)": {"attenuation": (0.07, 0.1), "thickness": (3000, 6000)},
    "비닐하우스 비닐 (150~200 µm)": {"attenuation": (0.15, 0.2), "thickness": (150, 200)},
}

# 차광막 상태와 시간을 관리
shade_status = "Open"
shade_close_time = None

# Lambert-Beer 법칙을 통한 내부 일사량 계산 함수
def calculate_internal_irradiance(external_irradiance, material_attenuation, thickness):
    return external_irradiance * math.exp(-material_attenuation * thickness)

# 내부 기온 계산 함수
def calculate_internal_temperature(external_temperature, internal_irradiance, area, heat_constant=0.1):
    return external_temperature + heat_constant * (internal_irradiance * area)

# 이메일 형식 검증 함수
def is_valid_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email) is not None

# 전화번호 형식 검증 함수
def is_valid_phone(phone):
    return re.match(r'^82\d{10}$', phone) is not None

# Streamlit 페이지 스타일링
st.markdown(
    """
    <style>
    .main { background-color: #F0FFF0; }
    h1 { color: #228B22; text-align: center; font-family: 'Arial', sans-serif; font-size: 30px; margin-bottom: 50px; }
    .css-18e3th9 { padding-top: 1rem; }
    .stButton button { display: block; margin: 0 auto; background-color: #4CAF50; color: white; font-size: 20px; border-radius: 12px; padding: 10px 24px; border: none; }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown('<h1>전북대 온실 차광막 제어 및 알림 시스템</h1>', unsafe_allow_html=True)

# 사용자 입력 필드
recipient_phone = st.text_input('전화번호 입력 (한국은 8210 뒤 8자리 입력, 예: 821012345678)', max_chars=12)
recipient_email = st.text_input('수신 이메일 입력')
temp_threshold = st.number_input("기온 임계값 (℃)", min_value=-50.0, max_value=50.0, value=30.0)
radiation_threshold = st.number_input("일사량 임계값 (W/m²)", min_value=0.0, max_value=3000.0, value=700.0)

# 필름 종류 선택
film_type = st.selectbox("필름 종류 선택", list(FILM_PROPERTIES.keys()))
film_info = FILM_PROPERTIES[film_type]
st.write(f"선택된 필름의 감쇠 계수 범위: {film_info['attenuation'][0]} ~ {film_info['attenuation'][1]}")
st.write(f"선택된 필름의 두께 범위: {film_info['thickness'][0]} ~ {film_info['thickness'][1]} µm")

# 감쇠 계수와 두께 직접 입력 또는 범위 내에서 선택
attenuation_input = st.radio("감쇠 계수 설정 방식", ("기본값 사용", "직접 입력"))
if attenuation_input == "기본값 사용":
    material_attenuation = sum(film_info['attenuation']) / 2  # 범위의 평균값 사용
else:
    material_attenuation = st.number_input("필름 감쇠 계수 입력", min_value=film_info['attenuation'][0], max_value=film_info['attenuation'][1])

thickness_input = st.radio("두께 설정 방식", ("기본값 사용", "직접 입력"))
if thickness_input == "기본값 사용":
    film_thickness = sum(film_info['thickness']) / 2  # 범위의 평균값 사용
else:
    film_thickness = st.number_input("필름 두께 입력 (µm)", min_value=film_info['thickness'][0], max_value=film_info['thickness'][1])

# 온실 면적 입력
area = st.number_input("온실 면적 (m²)", min_value=1.0, max_value=10000.0, value=100.0)

# 기상데이터 불러오는 함수
def fetch_weather_data():
    current_time = datetime.now()
    url = f"http://203.239.47.148:8080/dspnet.aspx?Site=85&Dev=1&Year={current_time.year}&Mon={current_time.month:02d}&Day={current_time.day:02d}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.text.splitlines()
        last_record = data[-1].split(",")
        timestamp = last_record[0]
        temperature = float(last_record[1])
        radiation = float(last_record[6])
        return timestamp, temperature, radiation, current_time
    except Exception as e:
        st.error(f"데이터 불러오기 실패: {e}")
        return None, None, None, None

# 차광막 제어 함수
def control_shade(external_temp, external_irradiance, temp_threshold, radiation_threshold, phone_number, fetch_time):
    global shade_status, shade_close_time

    # 내부 일사량 및 기온 계산
    internal_irradiance = calculate_internal_irradiance(external_irradiance, material_attenuation, film_thickness / 1000)  # µm에서 mm로 변환
    internal_temp = calculate_internal_temperature(external_temp, internal_irradiance, area)

    # 사용자 입력값과 기상대 데이터를 보여줌
    st.write(f"외부 기온: {external_temp}°C, 외부 일사량: {external_irradiance}W/m²")
    st.write(f"내부 예상 기온: {internal_temp:.2f}°C, 내부 예상 일사량: {internal_irradiance:.2f}W/m²")

    current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    adjusted_temp_threshold = temp_threshold - 5.0

    # 차광막 닫힘 조건
    if (internal_irradiance > radiation_threshold and internal_temp > adjusted_temp_threshold) and shade_status == "Open":
        shade_status = "Closed"
        shade_close_time = datetime.now()
        send_initial_monitoring_alerts(internal_temp, internal_irradiance, phone_number)
        send_email_close(internal_temp, internal_irradiance, current_time_str)
        send_sms(f"온실 차광막 닫힘: 기온 {internal_temp:.2f}°C, 일사량 {internal_irradiance:.2f}W/m²", phone_number)
        st.write(f"차광막 닫힘: {current_time_str}")

    # 차광막 열림 조건
    elif (internal_irradiance <= radiation_threshold or internal_temp <= temp_threshold) and shade_status == "Closed":
        shade_status = "Open"
        shade_open_time = datetime.now()
        total_closed_duration = shade_open_time - shade_close_time
        send_email_open(internal_temp, internal_irradiance, current_time_str, total_closed_duration)
        send_sms(f"온실 차광막 열림: 기온 {internal_temp:.2f}°C, 일사량 {internal_irradiance:.2f}W/m²", phone_number)
        st.write(f"차광막 열림: {current_time_str}, 닫혀있던 시간: {total_closed_duration}")

# SMS 전송 함수
def send_sms(message, phone_number):
    if phone_number and is_valid_phone(phone_number):
        try:
            response_data = sms.send_message({
                "from": "온실",
                "to": phone_number,
                "text": message[:70],
                "type": "unicode"
            })
            st.success("SMS 전송 성공!")
        except Exception as e:
            st.error(f"SMS 전송 실패: {e}")
    elif phone_number and not is_valid_phone(phone_number):
        st.error("올바른 전화번호 형식이 아닙니다. 82로 시작하는 12자리 숫자를 입력하세요.")

# 모니터링 시작 알림 이메일 및 SMS 전송 함수
def send_initial_monitoring_alerts(temp, irradiance, phone_number):
    message = f"모니터링 시작 중\n현재 내부 예상 기온: {temp:.2f}°C, 일사량: {irradiance:.2f}W/m²."
    if is_valid_email(recipient_email):
        send_email(message)
    if is_valid_phone(phone_number):
        send_sms(message, phone_number)

# 이메일 발송 함수 정의
def send_email(message):
    smtp_settings = get_smtp_settings()
    if smtp_settings is None:
        st.error("올바른 이메일 서비스를 선택하세요.")
        return

    try:
        msg = MIMEMultipart()
        msg['From'] = "온실 차광막 제어 시스템"
        msg['To'] = recipient_email
        msg['Subject'] = '차광막 알림'
        msg.attach(MIMEText(message, 'plain'))

        with smtplib.SMTP(smtp_settings['smtp_server'], smtp_settings['port']) as server:
            server.starttls()
            server.login(smtp_settings['email'], smtp_settings['password'])
            server.sendmail(smtp_settings['email'], recipient_email, msg.as_string())
        st.success("이메일 전송 완료!")
    except Exception as e:
        st.error(f"이메일 전송 오류: {e}")

# 실시간 모니터링 시작
def start_monitoring():
    if not recipient_phone and not recipient_email:
        st.error("전화번호 또는 이메일을 입력하세요.")
        return
    timestamp, external_temp, external_irradiance, fetch_time = fetch_weather_data()
    if timestamp is not None and (external_temp is not None or external_irradiance is not None):
        send_initial_monitoring_alerts(external_temp, external_irradiance, recipient_phone)
        while True:
            control_shade(external_temp, external_irradiance, temp_threshold, radiation_threshold, recipient_phone, fetch_time)
            time.sleep(600)

# 모니터링 시작 버튼
if st.button('모니터링 시작'):
    start_monitoring()
